#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[{"aliases":[],"name":".NET"},{"aliases":["C#","c#"],"languageName":"C#","name":"csharp"},{"aliases":["F#","f#"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"},{"aliases":["frontend"],"name":"vscode"},{"aliases":[],"name":"webview"}]}}

#!markdown

# Functional FizzBuzz in F#

This is a document of my experiments rather than a clear tutorial, some bits are experiments, other bits forma slightly clearer narrative.

#!fsharp

// first, define some numbers to Fizzify

let some_numbers max = seq {
    for x in 1..max do
      yield  x
}

#!markdown

We can see what we've got in `some_numbers` by evaluating it in a code block here in this workbook:

#!fsharp

some_numbers 100

#!markdown

OK, so that worked, and `seq` gives you an IEnumerable without allocating elements until you enumerate them. Can we generate something to tell us if the numbers are div 3 or div 5? 

#!fsharp

let values numbers = seq {
    for x in numbers do
      yield (x, x % 3 = 0, x % 5 = 0)
}

#!markdown

Now we have a sequence of tuples of type `(int, bool, bool)` where number is the value, and booleans that represent whether that number is divisible by 3, or by 5 (or both).

Can we write function that takes one of these tuples and turns it into the expected Fizz Buzz result?

#!fsharp

let FizzBuzz x = 
    match x with
    | (_, true, true) -> "FizzBuzz"
    | (_, true, false) -> "Fizz"
    | (_, false, true) -> "Buzz"
    | (n, _, _) -> $"{n}"

#!markdown

Looks reasonable. The signature of this function is (int, bool, bool) -> string, and it works by matching each (int, bool, bool) with the four cases shown. The underscore indicates 'don't care about this value'. F# enforces coverage of all the cases for matching. Which is nice.

Does it work?

#!fsharp

let n = some_numbers 100
let v = values n
let fbValues = Seq.map FizzBuzz v

fbValues

#!markdown

Well, that seems to work, though the formatting could use some love:

#!fsharp

fbValues |> Seq.iter (printfn "%s")

#!markdown

That works and all, but all those intermediate values are a bit ugly. Can we do something a bit more functional/f#-looking? Perhaps get rid of some intermediate values?

#!fsharp

values 
25
|> some_numbers
|> values
|> Seq.map FizzBuzz
|> Seq.iter (printfn "%s")

#!markdown

Yes. The `|>` operator sends the preceding thing to the following thing. When `Seq.map` receives the values, it passes them to `FizzBuzz` one tuple at a time, returning another sequence. We then take this sequence and pipe it on to `Seq.iter` which iterates over a sequence, calling the provided function (in this case `printfn "%s"` to print a formatted string) one at a time.

There might be better ways to do this, but I'm content for now!
